# -*- coding: utf-8 -*-
"""
Created on Fri Apr 28 16:02:33 2023

@author: MarcMignard
ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζηθικλμνξοπρσςτυφχψωάέήϊίόύϋώΆΈΉΊΌΎΏ±≥≤ΪΫ÷≈°√ⁿ²
"""
import numpy as np
import matplotlib.pyplot as plt
import ThermalAnalysis as ta

##########################################################################
###    Comparing Sun and Earth flux
###    
##########################################################################

plt.figure(figsize=(5,3.5),dpi=150)
plt.title('Comparison of sun flux to earth flux (log scale)')
T=5777; w=np.linspace(0.1,45,1000)*1e-6; sun = ta.planck(w,T);
plt.plot(w*1e6,sun/1e12,label='sun')
T=300; w=np.linspace(3,45,1000)*1e-6; earth = ta.planck(w,T);
plt.plot(w*1e6,earth/1e12,label='earth')
plt.grid(True)
plt.xlabel('wavelength (um)')
plt.ylabel('radiance (kW/(sr·m^2·nm))')
plt.yscale('log')
plt.legend()
#plt.savefig('./media/sun-earthFluxLog.svg', bbox_inches='tight')
plt.show    

plt.figure(figsize=(5,2),dpi=150)
#plt.title('Comparison of sun flux to earth flux\nlinear, but scaled to peak')
T=5777; w=np.linspace(0.1,30,1000)*1e-6; sun = ta.planck(w,T);
plt.plot(w*1e6,sun/max(sun),label='sun')
T=300; w=np.linspace(0.1,30,1000)*1e-6; earth = ta.planck(w,T);
plt.plot(w*1e6,earth/max(earth)/4,label='earth')
plt.text(1.5,0.6,'sun\nspectrum')
plt.text(15,0.2,'spectrum radiated by\nroom temperature object')
plt.grid(True)
plt.xlabel('wavelength (um)')
plt.ylabel('radiance (AU)')
#plt.yscale('log')
#plt.legend()
#plt.savefig('sun_RT_spec.svg', bbox_inches='tight')
#plt.savefig('./media/sun-earthFluxLin.svg', bbox_inches='tight')
plt.show    


##########################################################################
###    Satellite heat flux normalized by area
###    
##########################################################################
theta = np.linspace(0,360,73)
heightOrbit = 400e3
sides = ['zenith','nadir','forward','aft','north','south']
plt.figure(figsize=(5,3.5),dpi=150)
plt.suptitle('Total incident heat flux')
for beta in [0,60,75]:
    incidentFlux = np.zeros(theta.shape)
    for side in sides:
        incidentFlux = incidentFlux + ta.sunFlux(heightOrbit,theta,beta,side) + \
            ta.earthAlbedoFlux(heightOrbit,theta,beta,side) + \
            ta.earthGlowFlux(heightOrbit,side)*np.ones(theta.shape)
    plt.plot(theta,incidentFlux,label=f'beta={beta:.0f}deg')
plt.grid(True)
plt.xlabel('orbit angle, theta (deg)')
plt.ylabel('Incident flux (w/m^2)')
plt.xlim([0,360])
#plt.ylim([0,1400])
plt.legend()
plt.show

##########################################################################
###    Satellite incident power
###    
##########################################################################

    
heightOrbit = 400e3         #orbit height of the satellite above earth
heightSat = 0.3405          #satellite height in m (6U statellite)
widthSat = 0.10             #satellite width in m, in forward-aft direction
lengthSat = 0.20            #satellite length in m, in side-to-side direction
areas = np.array([widthSat*lengthSat,    #zenith
                  widthSat*lengthSat,   #nadir
                  widthSat*heightSat,   #forward
                  widthSat*heightSat,   #aft
                  lengthSat*heightSat,  #north
                  lengthSat*heightSat]) #south
plt.figure(figsize=(5,3.5),dpi=150)
plt.suptitle('Total incident heat flux for 6U cubesat size')
for beta in [0,60,75]:
    incidentFlux = np.zeros(theta.shape)
    for s in range(len(sides)):
        side = sides[s]
        incidentFlux = incidentFlux + areas[s]*ta.sunFlux(heightOrbit,theta,beta,side) + \
            areas[s]*ta.earthAlbedoFlux(heightOrbit,theta,beta,side) + \
            areas[s]*ta.earthGlowFlux(heightOrbit,side)*np.ones(theta.shape)
    plt.plot(theta,incidentFlux,label=f'β={beta:.0f}°')
plt.grid(True)
plt.xlabel('orbit angle, theta (deg)')
plt.ylabel('Incident flux (watts)')
plt.xlim([0,360])
#plt.ylim([0,1400])
plt.legend()
#plt.savefig('./media/satelliteHeatFlux.svg', bbox_inches='tight')
plt.show

##########################################################################
###    Satellite temperature
###    
##########################################################################
emS = 0.2       #emissivity at short wavelengths (visible)
emL = 0.8       #emissivity at long wavelengths (thermal)
localPower = 50            #power generated by satellite electronics, in W
totalArea = np.sum(areas)

print(f'space temperature contribution is {ta.ksb*np.sum(areas)*(3**4)*1e6:.2f}μW')    
plt.figure(figsize=(5,3.5),dpi=150)
plt.suptitle(f'Satellite temperature for 6U cubesat\nεS={emS:.1f}, εL={emL:.1f}, local power={localPower:.0f}W')
for beta in [0,60,75]:
    totalFlux = ta.totalFlux(heightOrbit,theta,beta,areas,emL,emS)
    satTemp = np.power((totalFlux+localPower)/ta.ksb/totalArea/emL,0.25)-273.15
    plt.plot(theta,satTemp,label=f'β={beta:.0f}°')
plt.grid(True)
plt.xlabel('orbit angle, theta (°)')
plt.ylabel('temperature (°C)')
plt.xlim([0,360])
plt.ylim([0,30])
plt.legend()
#plt.savefig('./media/satelliteTemperature01.svg', bbox_inches='tight')
plt.show


##########################################################################
###    Satellite temperature over time
###    
##########################################################################
nOrbits = 4
theta = np.linspace(0,360,433)*nOrbits #3 orbits for simulation
time = theta/360*ta.orbitalPeriod(heightOrbit+ta.radiusEarth)

emS = 0.2; emL = 0.8;
elecPwr = 50
beta = 0
volume = lengthSat*widthSat*heightSat
totalArea =  np.sum(areas)

absorbedFlux = ta.totalFlux(heightOrbit,theta%360,beta,areas,emL,emS)
iMax = np.where(absorbedFlux==np.max(absorbedFlux))[0][0]
thetaMax = theta[iMax]
qMax = absorbedFlux[iMax]
iMin = np.where(absorbedFlux==np.min(absorbedFlux))[0][0]
thetaMin = theta[iMin]
qMin = absorbedFlux[iMin]
print(f'thetaMax = {thetaMax:.3f}°, absorbed flux = {qMax:.2f}W')
print(f'thetaMin = {thetaMin:.3f}°, absorbed flux = {qMin:.2f}W')
TsatMax = np.power((qMax+elecPwr)/(emL*ta.ksb*totalArea),1/4)
TsatMin = np.power((qMin+elecPwr)/(emL*ta.ksb*totalArea),1/4)

fracAl = 0.25           #fraction of satellite that is aluminum
Cp = fracAl*921         #specific heat capacity of sat (J/(kg*K))
density = fracAl*2710   #density of sat (kg/m^3)
Tsat = np.zeros(time.size)
Tsat[0] = 280           #guess at initial temperature of sat (K)
for idx in np.arange(1,time.size):
    Tsat[idx] = Tsat[idx-1]+(absorbedFlux[idx]+elecPwr-emL*ta.ksb*totalArea*Tsat[idx-1]**4)/(volume*density*Cp)*(time[idx]-time[idx-1])

plt.figure(figsize=(5,3.5),dpi=150)
plt.title(f'6U Satellite temperature over {nOrbits} orbits\nwith generated power of {elecPwr:.0f}W, β={beta}°')

plt.plot(time/60,TsatMax*np.ones(time.size)-273.15,label='max')
plt.plot(time/60,Tsat-273.15,label='transient')
plt.plot(time/60,TsatMin*np.ones(time.size)-273.15,label='min')
plt.ylabel('temperature (°C)')
plt.grid(True)
plt.xlabel('time (min)')
plt.xlim([time[0]/60,time[-1]/60])
plt.ylim([0,30])
plt.legend()
#plt.savefig('./media/satTimeTemp.svg', bbox_inches='tight')
plt.show 

   