# -*- coding: utf-8 -*-
"""
Created on Fri Apr 28 16:02:33 2023

@author: MarcMignard
"""
import numpy as np
import matplotlib.pyplot as plt
import ThermalAnalysis as ta

##########################################################################
###    Satellite heat flux normalized by area
###    
##########################################################################
theta = np.linspace(0,360,73)
heightOrbit = 400e3
sides = ['zenith','nadir','forward','aft','north','south']
plt.figure(figsize=(5,3.5),dpi=300)
plt.suptitle('Total incident heat flux')
for beta in [0,60,75]:
    incidentFlux = np.zeros(theta.shape)
    for side in sides:
        incidentFlux = incidentFlux + ta.sunFlux(heightOrbit,theta,beta,side) + \
            ta.earthAlbedoFlux(heightOrbit,theta,beta,side) + \
            ta.earthGlowFlux(heightOrbit,side)*np.ones(theta.shape)
    plt.plot(theta,incidentFlux,label=f'beta={beta:.0f}deg')
plt.grid(True)
plt.xlabel('orbit angle, theta (deg)')
plt.ylabel('Incident flux (w/m^2)')
plt.xlim([0,360])
#plt.ylim([0,1400])
plt.legend()
plt.show

##########################################################################
###    Satellite incident power
###    
##########################################################################
heightOrbit = 400e3         #orbit height of the satellite above earth
heightSat = 0.3405          #satellite height in m (6U statellite)
widthSat = 0.10             #satellite width in m, in forward-aft direction
lengthSat = 0.20            #satellite length in m, in side-to-side direction
localPower = 100            #power generated by satellite electronics, in W
sideEmissivity = 1          #earth and side facing
topEmissivity = 1           #sun facing
areas = np.array([topEmissivity*widthSat*lengthSat, #zenith
                  sideEmissivity*widthSat*lengthSat, #nadir
                  sideEmissivity*lengthSat*heightSat, #forward
                  sideEmissivity*lengthSat*heightSat, #aft
                  sideEmissivity*widthSat*heightSat, #north
                  sideEmissivity*widthSat*heightSat, #south
                  ])
plt.figure(figsize=(5,3.5),dpi=300)
plt.suptitle(f'Total incident heat flux\nεTop={topEmissivity:.2f}, εSides={sideEmissivity:.2f}')
for beta in [0,60,75]:
    incidentFlux = np.zeros(theta.shape)
    for s in range(len(sides)):
        side = sides[s]
        incidentFlux = incidentFlux + areas[s-1]*ta.sunFlux(heightOrbit,theta,beta,side) + \
            areas[s-1]*ta.earthAlbedoFlux(heightOrbit,theta,beta,side) + \
            areas[s-1]*ta.earthGlowFlux(heightOrbit,side)*np.ones(theta.shape)
    plt.plot(theta,incidentFlux,label='beta={:.0f}deg'.format(beta))
plt.grid(True)
plt.xlabel('orbit angle, theta (deg)')
plt.ylabel('Incident flux (watts)')
plt.xlim([0,360])
#plt.ylim([0,1400])
plt.legend()
plt.show

##########################################################################
###    Satellite temperature
###    
##########################################################################
plt.figure(figsize=(5,3.5),dpi=150)
plt.suptitle(f'Satellite temperature\nεTop={topEmissivity:.1f}, εSides={sideEmissivity:.1f}, local power={localPower:.0f}W')
for beta in [0,60,75]:
    incidentFlux = np.zeros(theta.shape)
    totalArea = np.sum(areas)
    for s in range(len(sides)):
        side = sides[s]
        incidentFlux = incidentFlux + areas[s-1]*ta.sunFlux(heightOrbit,theta,beta,side) + \
            areas[s-1]*ta.earthAlbedoFlux(heightOrbit,theta,beta,side) + \
            areas[s-1]*ta.earthGlowFlux(heightOrbit,side)*np.ones(theta.shape)
        satTemp = np.power((incidentFlux+localPower)/ta.ksb,0.25)-273.15
    plt.plot(theta,satTemp,label='beta={:.0f}deg'.format(beta))
plt.grid(True)
plt.xlabel('orbit angle, theta (deg)')
plt.ylabel('temperature (°C)')
plt.xlim([0,360])
#plt.ylim([0,1400])
plt.legend()
plt.show

##########################################################################
###    Satellite temperature
###    
##########################################################################

heightOrbit = 400e3
print(f'period of satellite at an altitude of {heightOrbit/1000} km is {ta.orbitalPeriod(600e3+ta.radiusEarth)/60:.2f} minutes')

#Integrate irradianceSunFromEarth to get the total irradiance power of the sun 
#per square meter at the earth (qDotSol). The range of wavelength has to be from like 0.1um to 20um
w = np.linspace(0.2,30,1000)*1e-6
print(f'qDotSol = {ta.qDotSol:.1f} W/m^2')
print(f'flux density in earth orbit from the sun is {sum(ta.irradianceSunFromEarth(w,5777))*(w[1]-w[0]):.1f} W/m^2')

qDotEarth = ta.qDotSol*(1-ta.albedoEarth)/4 #IR heat flux from earth ~239 W/m^2
print(f'qDotEarth = {qDotEarth:.1f} W/m^2')
#the flux density below can't possibly be right
print(f'flux density in earth orbit from the earth is {sum(ta.irradianceEarthFromSat(w,255,heightOrbit))*(w[1]-w[0]):.0f} W/m^2')
      #255 earth temperature from pg 64 of https://tfaws.nasa.gov/wp-content/uploads/On-Orbit_Thermal_Environments_TFAWS_2014.pdf

##########################################################################
###    Comparing Sun and Earth flux
###    
##########################################################################

plt.figure(figsize=(5,3.5),dpi=150)
plt.title('Comparison of sun flux to earth flux (log scale)')
T=5777; w=np.linspace(0.1,45,1000)*1e-6; sun = ta.planck(w,T);
plt.plot(w*1e6,sun/1e12,label='sun')
T=300; w=np.linspace(3,45,1000)*1e-6; earth = ta.planck(w,T);
plt.plot(w*1e6,earth/1e12,label='earth')
plt.grid(True)
plt.xlabel('wavelength (um)')
plt.ylabel('radiance (kW/(sr·m^2·nm))')
plt.yscale('log')
plt.legend()
plt.savefig('./media/sun-earthFluxLog.svg', bbox_inches='tight')
plt.show    

plt.figure(figsize=(5,2),dpi=150)
#plt.title('Comparison of sun flux to earth flux\nlinear, but scaled to peak')
T=5777; w=np.linspace(0.1,30,1000)*1e-6; sun = ta.planck(w,T);
plt.plot(w*1e6,sun/max(sun),label='sun')
T=300; w=np.linspace(0.1,30,1000)*1e-6; earth = ta.planck(w,T);
plt.plot(w*1e6,earth/max(earth)/4,label='earth')
plt.text(1.5,0.6,'sun\nspectrum')
plt.text(15,0.2,'spectrum radiated by\nroom temperature object')
plt.grid(True)
plt.xlabel('wavelength (um)')
plt.ylabel('radiance (AU)')
#plt.yscale('log')
#plt.legend()
#plt.savefig('sun_RT_spec.svg', bbox_inches='tight')
plt.savefig('./media/sun-earthFluxLin.svg', bbox_inches='tight')
plt.show    

##########################################################################
###    Verify planck() equation in ThermalAnalysis.py
###    
##########################################################################

#this matches the first figure at https://en.wikipedia.org/wiki/Planck%27s_law
wavelength = np.linspace(0.1,3,1000)*1e-6
plt.figure(figsize=(5,3.5),dpi=150)
for T in [5000,4000,3000]:
#for T in [300,252]:
    #/1e12 is to get kW/nm
    plt.plot(wavelength*1e6,ta.planck(wavelength,T)/1e12,label='T={:.0f}K'.format(T))
plt.grid(True)
plt.xlabel('wavelength (um)')
plt.ylabel('radiance (kW/(sr·m^2·nm))')
#plt.xlim([0,360])
#plt.xticks(np.arange(0,390,30))
#plt.ylim([0,1400])
plt.legend()
plt.show    
       
##########################################################################
###    Verify irradianceSunFromEarth() equation in ThermalAnalysis.py
###    
##########################################################################
#this is the same as the figure on page 13 of 
#https://tfaws.nasa.gov/wp-content/uploads/On-Orbit_Thermal_Environments_TFAWS_2014.pdf
plt.figure(figsize=(5,3.5),dpi=150)
for T in [5777,4000,3000]:
    plt.plot(wavelength*1e9,ta.irradianceSunFromEarth(wavelength,T)/1e9,label=f'T={T:.0f}K')
plt.grid(True)
plt.xlabel('wavelength (nm)')
plt.ylabel('radiance (W/(m^2·nm))')
#plt.xlim([0,360])
#plt.xticks(np.arange(0,390,30))
#plt.ylim([0,1400])
plt.legend()
plt.show  
  
plt.figure(figsize=(5,3.5),dpi=150)
for T in [300,252]:
    plt.plot(wavelength*1e9,ta.planck(wavelength,T)/1e9,label=f'T={T:.0f}K')
plt.grid(True)
plt.xlabel('wavelength (nm)')
plt.ylabel('radiance (W/(m^2·nm))')
#plt.xlim([0,360])
#plt.xticks(np.arange(0,390,30))
#plt.ylim([0,1400])
plt.legend()
plt.show    

##########################################################################
###    Had to adjust the sun temperature from 5777 to 5930 to get
###    numerical integration of spectral flux to match number based
###    on qDot. This is odd because integration of irradianceSunFromEarth()
###    with 5777 works almost perfectly
##########################################################################
theta = np.linspace(0,360,73)
heightOrbit = 408e3

waves = np.linspace(0.2,20,900)*1e-6
sf0w = ta.sunFlux(heightOrbit,theta,0,1,waves,5930)
sf0 = np.sum(sf0w,axis=1)*(w[1]-w[0])
sf60w = ta.sunFlux(heightOrbit,theta,60,1,waves,5930)
sf60 = np.sum(sf60w,axis=1)*(w[1]-w[0])

#zenith facing side
plt.figure(figsize=(5,3.5),dpi=150)
plt.suptitle('Difference in flux with numerical integration')
beta = 0
plt.plot(theta,ta.sunFlux(heightOrbit,theta,beta,1),label='beta={:.0f}deg'.format(beta))
plt.plot(theta,sf0,'--',label='beta={:.0f}deg'.format(beta))
beta = 60
plt.plot(theta,ta.sunFlux(heightOrbit,theta,beta,1),label='beta={:.0f}deg'.format(beta))
plt.plot(theta,sf60,'--',label='beta={:.0f}deg'.format(beta))
#plt.plot(theta,(1-sf60/ta.sunFlux(heightOrbit,theta,beta,1))*100,label='beta={:.0f}deg'.format(beta))
plt.grid(True)
plt.xlabel('orbit angle, theta (deg)')
plt.xlim([0,360])
plt.xticks(np.arange(0,390,90))
#plt.ylim([0,1400])
plt.xlabel('orbit angle, theta (deg)')
plt.ylabel('Incident flux (w/m^2)')
plt.legend()
plt.show
